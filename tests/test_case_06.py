"""
Test Case #6: Th√™m gi·ªè h√†ng kh√¥ng th√†nh c√¥ng v·ªõi s·ªë l∆∞·ª£ng = 0

Technique: Boundary Value Analysis, Validation Testing
Tool: Selenium
Execution: Automated
Dynamic Testing: Boundary Condition Testing
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
import time
import logging

from config.settings import *
from config.locators import ProductPageLocators
from config.test_data import TestData
from utils.driver_manager import DriverManager
from utils.test_helpers import TestHelpers

class TestCase06:
    """Test Case 6: Boundary Value Analysis - S·ªë l∆∞·ª£ng = 0"""
    
    def __init__(self):
        self.driver = None
        self.wait = None
        self.test_helpers = TestHelpers()
        self.test_data = TestData.TC6_DATA
        
    def setup(self):
        """Thi·∫øt l·∫≠p test environment"""
        print("üîß Setting up Test Case #6: Boundary Value Analysis")
        self.driver = DriverManager.get_driver()
        self.wait = WebDriverWait(self.driver, EXPLICIT_WAIT)
        
    def teardown(self):
        """D·ªçn d·∫πp sau test"""
        if SCREENSHOT_ON_FAILURE:
            self.test_helpers.take_screenshot(self.driver, "TC06_final_state")
        
        if self.driver:
            time.sleep(3)
            self.driver.quit()
        print("üßπ Test Case #6 cleanup completed")
    
    def execute_boundary_value_analysis(self):
        """
        Th·ª±c hi·ªán Boundary Value Analysis
        
        Ki·ªÉm tra behavior t·∫°i boundary values (0, 1, -1, max value)
        """
        try:
            print("\nüìä BOUNDARY VALUE ANALYSIS")
            print("-" * 40)
            
            # Boundary values cho quantity field
            boundary_values = {
                "lower_bound": 0,    # Test case n√†y
                "valid_min": 1,      # Minimum valid value
                "normal": 5,         # Normal value
                "upper_bound": 999,  # Reasonable max
                "invalid_high": 999999  # Very high value
            }
            
            print("üî¢ Boundary values identified:")
            for key, value in boundary_values.items():
                print(f"   {key}: {value}")
            
            # Test v·ªõi boundary value = 0
            return self.test_quantity_boundary(0)
            
        except Exception as e:
            return {"status": "ERROR", "message": f"Boundary analysis error: {str(e)}"}
    
    def test_quantity_boundary(self, quantity_value):
        """
        Test specific boundary value cho quantity
        
        Args:
            quantity_value: Gi√° tr·ªã c·∫ßn test
            
        Returns:
            dict: Test result
        """
        print(f"\nüß™ Testing boundary value: {quantity_value}")
        
        # B∆∞·ªõc 1: Truy c·∫≠p trang
        self.driver.get(PRODUCT_URL)
        print(f"‚úì Accessed: {PRODUCT_URL}")
        
        # B∆∞·ªõc 2: Ch·ªçn ph√¢n lo·∫°i (ƒë·ªÉ focus v√†o quantity testing)
        category_dropdown = self.test_helpers.find_element_by_multiple_selectors(
            self.driver, self.wait, ProductPageLocators.CATEGORY_DROPDOWN, timeout=5
        )
        
        if category_dropdown:
            try:
                select = Select(category_dropdown)
                if len(select.options) > 1:
                    select.select_by_index(1)  # Ch·ªçn option ƒë·∫ßu ti√™n (kh√¥ng ph·∫£i placeholder)
                    print("‚úì ƒê√£ ch·ªçn ph√¢n lo·∫°i ƒë·ªëi t∆∞·ª£ng")
            except:
                print("‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ªçn ph√¢n lo·∫°i, ti·∫øp t·ª•c test")
        
        # B∆∞·ªõc 3: T√¨m v√† modify quantity field
        quantity_input = self.test_helpers.find_element_by_multiple_selectors(
            self.driver, self.wait, ProductPageLocators.QUANTITY_INPUT
        )
        
        if not quantity_input:
            return {"status": "FAILED", "message": "Kh√¥ng t√¨m th·∫•y quantity input field"}
        
        # Clear v√† nh·∫≠p boundary value
        success = self.test_helpers.safe_send_keys(self.driver, quantity_input, quantity_value, clear_first=True)
        if not success:
            return {"status": "FAILED", "message": f"Kh√¥ng th·ªÉ nh·∫≠p gi√° tr·ªã {quantity_value}"}
        
        print(f"‚úì ƒê√£ nh·∫≠p quantity = {quantity_value}")
        
        # B∆∞·ªõc 4: Click "Th√™m v√†o gi·ªè h√†ng"
        add_to_cart_btn = self.test_helpers.find_element_by_multiple_selectors(
            self.driver, self.wait, ProductPageLocators.ADD_TO_CART_BUTTON
        )
        
        if not add_to_cart_btn:
            return {"status": "FAILED", "message": "Kh√¥ng t√¨m th·∫•y button 'Th√™m v√†o gi·ªè h√†ng'"}
        
        success = self.test_helpers.safe_click(self.driver, add_to_cart_btn)
        if not success:
            return {"status": "FAILED", "message": "Kh√¥ng th·ªÉ click button"}
        
        print("‚úì ƒê√£ click 'Th√™m v√†o gi·ªè h√†ng'")
        
        # B∆∞·ªõc 5: Ki·ªÉm tra behavior
        time.sleep(2)  # ƒê·ª£i response
        
        # Ki·ªÉm tra quantity field c√≥ reset v·ªÅ 1 kh√¥ng
        current_value = quantity_input.get_attribute("value")
        print(f"üìä Quantity value after submit: {current_value}")
        
        expected_behavior = self.test_data['expected_behavior']
        expected_cart_items = self.test_data['expected_cart_items']
        
        if expected_behavior == "reset_to_1":
            if current_value == "1":
                print("‚úÖ Boundary value behavior correct: Reset to 1")
                return {
                    "status": "PASSED",
                    "message": f"Quantity {quantity_value} correctly handled - reset to 1, no items added to cart"
                }
            else:
                return {
                    "status": "FAILED",
                    "message": f"Quantity kh√¥ng reset v·ªÅ 1. Current value: {current_value}"
                }
        
        return {"status": "PASSED", "message": "Boundary value test completed"}
    
    def execute_validation_testing(self):
        """
        Th·ª±c hi·ªán Validation Testing cho boundary case
        """
        print("\n‚úÖ VALIDATION TESTING")
        print("-" * 40)
        
        print("üîç Validating system behavior with boundary value 0:")
        print("   - Should not accept quantity = 0")
        print("   - Should reset to minimum valid value (1)")
        print("   - Should not add item to cart")
        
        return self.execute_boundary_value_analysis()
    
    def run_test(self):
        """Ch·∫°y full test case"""
        try:
            self.setup()
            
            print("=" * 60)
            print("TEST CASE #6: Boundary Value Analysis + Validation Testing")
            print("=" * 60)
            print(f"User: {CURRENT_USER}")
            print(f"Date: {TEST_DATE}")
            print(f"Technique: Boundary Value Analysis, Validation Testing")
            print(f"Tool: Selenium")
            print(f"Dynamic Testing: Boundary Condition Testing")
            print(f"Input: S·ªë l∆∞·ª£ng = 0")
            print(f"Expected: Kh√¥ng th√™m kh√≥a h·ªçc v√†o gi·ªè h√†ng, s·ªë l∆∞·ª£ng reset v·ªÅ 1")
            
            result = self.execute_validation_testing()
            
            print(f"\nüèÅ FINAL RESULT: {result['status']}")
            print(f"üìù Message: {result['message']}")
            
            return result
            
        except Exception as e:
            error_msg = f"Test execution error: {str(e)}"
            print(f"üí• ERROR: {error_msg}")
            return {"status": "ERROR", "message": error_msg}
        finally:
            self.teardown()

def run_test_case_06():
    """Entry point cho Test Case 6"""
    test = TestCase06()
    return test.run_test()

if __name__ == "__main__":
    result = run_test_case_06()
    print(f"\nüéØ Test Case #6 Result: {result['status']}")