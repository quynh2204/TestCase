"""
Test Case #5: Th√™m gi·ªè h√†ng kh√¥ng th√†nh c√¥ng khi kh√¥ng ch·ªçn ph√¢n lo·∫°i ƒë·ªëi t∆∞·ª£ng

Technique: Input Validation, Decision Table
Tool: Selenium
Execution: Automated
Dynamic Testing: Input Validation
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import logging

from config.settings import *
from config.locators import ProductPageLocators
from config.test_data import TestData
from utils.driver_manager import DriverManager
from utils.test_helpers import TestHelpers

class TestCase05:
    """Test Case 5: Input Validation - Kh√¥ng ch·ªçn ph√¢n lo·∫°i"""
    
    def __init__(self):
        self.driver = None
        self.wait = None
        self.test_helpers = TestHelpers()
        self.test_data = TestData.TC5_DATA
        
    def setup(self):
        """Thi·∫øt l·∫≠p test environment"""
        print("üîß Setting up Test Case #5: Input Validation")
        self.driver = DriverManager.get_driver()
        self.wait = WebDriverWait(self.driver, EXPLICIT_WAIT)
        
    def teardown(self):
        """D·ªçn d·∫πp sau test"""
        if SCREENSHOT_ON_FAILURE:
            self.test_helpers.take_screenshot(self.driver, "TC05_final_state")
        
        if self.driver:
            time.sleep(3)  # Pause ƒë·ªÉ quan s√°t
            self.driver.quit()
        print("üßπ Test Case #5 cleanup completed")
        
    def execute_input_validation_test(self):
        """
        Th·ª±c hi·ªán Input Validation Testing
        
        Ki·ªÉm tra xem h·ªá th·ªëng c√≥ validate input ƒë√∫ng c√°ch kh√¥ng
        """
        try:
            print("\nüìã INPUT VALIDATION TESTING")
            print("-" * 40)
            
            # B∆∞·ªõc 1: Truy c·∫≠p trang
            self.driver.get(PRODUCT_URL)
            print(f"‚úì Accessed: {PRODUCT_URL}")
            
            # B∆∞·ªõc 2: Ki·ªÉm tra form validation
            print("\nüîç Testing form validation...")
            
            # Kh√¥ng ch·ªçn ph√¢n lo·∫°i (theo test data)
            print("- Kh√¥ng ch·ªçn ph√¢n lo·∫°i ƒë·ªëi t∆∞·ª£ng")
            print("- S·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh: 1")
            
            # B∆∞·ªõc 3: Th·ª≠ submit form m√† kh√¥ng ch·ªçn required field
            add_to_cart_btn = self.test_helpers.find_element_by_multiple_selectors(
                self.driver, self.wait, ProductPageLocators.ADD_TO_CART_BUTTON
            )
            
            if not add_to_cart_btn:
                return {"status": "FAILED", "message": "Kh√¥ng t√¨m th·∫•y button 'Th√™m v√†o gi·ªè h√†ng'"}
            
            # Click button ƒë·ªÉ trigger validation
            success = self.test_helpers.safe_click(self.driver, add_to_cart_btn)
            if not success:
                return {"status": "FAILED", "message": "Kh√¥ng th·ªÉ click button"}
            
            print("‚úì ƒê√£ click 'Th√™m v√†o gi·ªè h√†ng' m√† kh√¥ng ch·ªçn ph√¢n lo·∫°i")
            
            # B∆∞·ªõc 4: Ki·ªÉm tra validation message
            print("\nüîç Checking validation result...")
            
            error_element = self.test_helpers.find_element_by_multiple_selectors(
                self.driver, self.wait, ProductPageLocators.ERROR_MESSAGE, timeout=5
            )
            
            if not error_element:
                # Th·ª≠ t√¨m b·∫±ng text content
                try:
                    error_element = self.wait.until(
                        EC.presence_of_element_located((By.XPATH, 
                            f"//*[contains(text(), '{self.test_data['expected_message']}')]"))
                    )
                except:
                    return {
                        "status": "FAILED", 
                        "message": "Kh√¥ng c√≥ validation message n√†o xu·∫•t hi·ªán"
                    }
            
            actual_message = error_element.text
            expected_message = self.test_data['expected_message']
            
            print(f"Expected: '{expected_message}'")
            print(f"Actual: '{actual_message}'")
            
            # Validation
            if expected_message in actual_message:
                return {
                    "status": "PASSED",
                    "message": f"Input validation ho·∫°t ƒë·ªông ƒë√∫ng: '{actual_message}'"
                }
            else:
                return {
                    "status": "FAILED",
                    "message": f"Validation message kh√¥ng ƒë√∫ng. Expected: '{expected_message}', Actual: '{actual_message}'"
                }
                
        except Exception as e:
            return {"status": "ERROR", "message": f"L·ªói trong input validation test: {str(e)}"}
    
    def execute_decision_table_test(self):
        """
        Th·ª±c hi·ªán Decision Table Testing
        
        Test c√°c quy·∫øt ƒë·ªãnh c·ªßa h·ªá th·ªëng d·ª±a tr√™n input combinations
        """
        print("\nüìä DECISION TABLE TESTING")
        print("-" * 40)
        
        # Decision table cho test case n√†y:
        # Category Selected | Quantity | Expected Result
        # No               | 1        | Show error message
        # Yes              | 1        | Add to cart (not tested here)
        
        decision_table = [
            {
                "category_selected": False,
                "quantity": 1,
                "expected_result": "error_message",
                "description": "Kh√¥ng ch·ªçn ph√¢n lo·∫°i, s·ªë l∆∞·ª£ng h·ª£p l·ªá"
            }
        ]
        
        for scenario in decision_table:
            print(f"\nüß™ Testing scenario: {scenario['description']}")
            print(f"   Category: {'Selected' if scenario['category_selected'] else 'Not Selected'}")
            print(f"   Quantity: {scenario['quantity']}")
            print(f"   Expected: {scenario['expected_result']}")
            
            # ƒê√¢y l√† scenario ch√≠nh c·ªßa test case n√†y
            result = self.execute_input_validation_test()
            return result
    
    def run_test(self):
        """Ch·∫°y full test case v·ªõi c·∫£ hai techniques"""
        try:
            self.setup()
            
            print("=" * 60)
            print("TEST CASE #5: Input Validation + Decision Table Testing")
            print("=" * 60)
            print(f"User: {CURRENT_USER}")
            print(f"Date: {TEST_DATE}")
            print(f"Technique: Input Validation, Decision Table")
            print(f"Tool: Selenium")
            print(f"Dynamic Testing: Input Validation")
            
            # Th·ª±c hi·ªán decision table test (bao g·ªìm input validation)
            result = self.execute_decision_table_test()
            
            print(f"\nüèÅ FINAL RESULT: {result['status']}")
            print(f"üìù Message: {result['message']}")
            
            return result
            
        except Exception as e:
            error_msg = f"Test execution error: {str(e)}"
            print(f"üí• ERROR: {error_msg}")
            return {"status": "ERROR", "message": error_msg}
        finally:
            self.teardown()

def run_test_case_05():
    """Entry point cho Test Case 5"""
    test = TestCase05()
    return test.run_test()

if __name__ == "__main__":
    result = run_test_case_05()
    print(f"\nüéØ Test Case #5 Result: {result['status']}")